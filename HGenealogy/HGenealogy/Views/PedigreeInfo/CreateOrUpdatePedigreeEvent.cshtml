@model HGenealogy.Models.PedigreeInfo.PedigreeEventModel
@{

    string tilte = ViewBag.Title;
    int currentHGPedigreeID = ViewBag.currentPedigreeID;
    string currentInfoType = ViewBag.currentInfoType;
    IDictionary<string, string> infoTypeDic = ViewBag.infoTypeDic;
}
@using (Html.BeginForm("SavePedigreeEvent", "PedigreeInfo", FormMethod.Post, new {@id="eventForm" }))
{

    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.PedigreeID)
    @Html.HiddenFor(model => model.CreatedOnUtc)
    @Html.HiddenFor(model => model.UpdatedOnUtc)
    @Html.HiddenFor(model => model.CreatedWho)
    @Html.HiddenFor(model => model.UpdatedWho)
    
    <div class="form-horizontal">
        <h1>@tilte</h1>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div>
            @Html.ActionLink("返回族譜瀏灠", "Index", new { @pedigreeID = currentHGPedigreeID, @infoType = currentInfoType })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EventTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EventTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EventContent, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventContent, "RichEditor")
                @Html.ValidationMessageFor(model => model.EventContent, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EventDateStartOnUtc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventDateStartOnUtc, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EventDateStartOnUtc, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EventDateEndOnUtc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventDateEndOnUtc, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EventDateEndOnUtc, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EventPlace, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventPlace, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EventPlace, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MetaKeywords, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MetaKeywords, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MetaKeywords, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn  btn-danger pull-left">
                    <span class="glyphicon glyphicon-floppy-save"></span> 存檔
                </button>
            </div>
        </div>
    </div>
}

<script>
    $(document).ready(function () {
        // create DatePicker from input HTML element
        $("#EventDateOnUtc").kendoDatePicker(
            {
                format: "yyyy/MM/dd",
                culture: "zh-CHT"
                //,
                //change: function () {
                //    var value = this.value();
                //    console.log(value);     //value is the selected date in the datepicker
                //}
            }
            );

        $("#Longitude").attr("readonly", true);
        $("#Latitude").attr("readonly", true);
    });

    //$("#EventDateOnUtc").kendoValidator({
    //    rules: {
    //        date: function (input) {
    //            var d = kendo.parseDate(input.val(), "yyyy-MM-dd");
    //            return d instanceof Date;
    //        }
    //    }
    //});

    $("#EventDateOnUtc").kendoValidator({
        rules: {
            //implement your custom date validation
            dateValidation: function (e) {
                var currentDate = kendo.parseDate(e.val());
                console.log(currentDate);
                //Check if Date parse is successful
                if (currentDate==null) {
                    return false;
                }
                return true;
            }
        },
        messages: {
            //Define your custom validation massages
            required: "日期未輸入",
            dateValidation: "日期格式錯誤，請檢核！"
        }
    });


    $("#EventPlace").change(function () {
        var eventPlace = $("#EventPlace").val();

        console.log(eventPlace);
        if (eventPlace == null || eventPlace == "") {
            $("#Latitude").val(0);
            $("#Longitude").val(0);
            return;
        }

        $.ajax({
            url: '@Url.Action("GetEventPlaceRelation")',
            type: 'POST',
            data: {
                eventPlace: eventPlace
            },
            success: function (response) {
                if (response.success == true) {
                    $("#Latitude").val(response.latitude);
                    $("#Longitude").val(response.longitude);
                }
            },
            error: function (response) {
                alert('Error: ' + response.status + ' ' + response.statusText);
            }
        });
    });
</script>